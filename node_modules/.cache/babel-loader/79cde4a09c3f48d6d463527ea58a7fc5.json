{"ast":null,"code":"var _jsxFileName = \"/var/www/html/iris/chat-cosey-front/src/Pages/ChatroomPage.js\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst ChatroomPage = ({\n  match,\n  socket\n}) => {\n  const chatroomId = match.params.id;\n  const [messages, setMessages] = React.useState([]);\n  const messageRef = React.useRef();\n  const [userId, setUserId] = React.useState(\"\");\n\n  const sendMessage = () => {\n    if (socket) {\n      socket.emit(\"chatroomMessage\", {\n        chatroomId,\n        message: messageRef.current.value\n      });\n      messageRef.current.value = \"\";\n    }\n  };\n\n  React.useEffect(() => {\n    const token = localStorage.getItem(\"CC_Token\");\n\n    if (token) {\n      const payload = JSON.parse(atob(token.split(\".\")[1]));\n      setUserId(payload.id);\n    }\n\n    if (socket) {\n      socket.on(\"newMessage\", message => {\n        const newMessages = [...messages, message];\n        setMessages(newMessages);\n      });\n    } //eslint-disable-next-line\n\n  }, [messages]);\n  React.useEffect(() => {\n    if (socket) {\n      socket.emit(\"joinRoom\", {\n        chatroomId\n      });\n    }\n\n    return () => {\n      //Component Unmount\n      if (socket) {\n        socket.emit(\"leaveRoom\", {\n          chatroomId\n        });\n      }\n    }; //eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatroomPage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatroomSection\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cardHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, \"Agent Name\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatroomContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, messages.map((message, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    className: \"message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: userId === message.userId ? \"ownMessage\" : \"otherMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, message.name, \":\"), \" \", message.message))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatroomActions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"message\",\n    placeholder: \"Say something!\",\n    ref: messageRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"join\",\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, \"Send\")))));\n};\n\nexport default withRouter(ChatroomPage);","map":{"version":3,"sources":["/var/www/html/iris/chat-cosey-front/src/Pages/ChatroomPage.js"],"names":["React","withRouter","ChatroomPage","match","socket","chatroomId","params","id","messages","setMessages","useState","messageRef","useRef","userId","setUserId","sendMessage","emit","message","current","value","useEffect","token","localStorage","getItem","payload","JSON","parse","atob","split","on","newMessages","map","i","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst ChatroomPage = ({ match, socket }) => {\n  const chatroomId = match.params.id;\n  const [messages, setMessages] = React.useState([]);\n  const messageRef = React.useRef();\n  const [userId, setUserId] = React.useState(\"\");\n\n  const sendMessage = () => {\n    if (socket) {\n      socket.emit(\"chatroomMessage\", {\n        chatroomId,\n        message: messageRef.current.value,\n      });\n\n      messageRef.current.value = \"\";\n    }\n  };\n\n  React.useEffect(() => {\n    const token = localStorage.getItem(\"CC_Token\");\n    if (token) {\n      const payload = JSON.parse(atob(token.split(\".\")[1]));\n      setUserId(payload.id);\n    }\n    if (socket) {\n      socket.on(\"newMessage\", (message) => {\n        const newMessages = [...messages, message];\n        setMessages(newMessages);\n      });\n    }\n    //eslint-disable-next-line\n  }, [messages]);\n\n  React.useEffect(() => {\n    if (socket) {\n      socket.emit(\"joinRoom\", {\n        chatroomId,\n      });\n    }\n\n    return () => {\n      //Component Unmount\n      if (socket) {\n        socket.emit(\"leaveRoom\", {\n          chatroomId,\n        });\n      }\n    };\n    //eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"chatroomPage\">\n      <div className=\"chatroomSection\">\n        <div className=\"cardHeader\">Agent Name</div>\n        <div className=\"chatroomContent\">\n          {messages.map((message, i) => (\n            <div key={i} className=\"message\">\n              <span\n                className={\n                  userId === message.userId ? \"ownMessage\" : \"otherMessage\"\n                }\n              >\n                {message.name}:\n              </span>{\" \"}\n              {message.message}\n            </div>\n          ))}\n        </div>\n        <div className=\"chatroomActions\">\n          <div>\n            <input\n              type=\"text\"\n              name=\"message\"\n              placeholder=\"Say something!\"\n              ref={messageRef}\n            />\n          </div>\n          <div>\n            <button className=\"join\" onClick={sendMessage}>\n              Send\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(ChatroomPage);\n"]},"metadata":{},"sourceType":"module"}